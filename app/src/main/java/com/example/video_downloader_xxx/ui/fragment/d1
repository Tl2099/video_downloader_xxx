# 🎯 HƯỚNG DẪN TẠO APP TẢI VIDEO TỪ WEB

## 📋 TỔNG QUAN KIẾN TRÚC

```
┌─────────────────────────────────────────────────────────┐
│                      UI LAYER                           │
│  (BrowserFragment, ProgressFragment, MainActivity)      │
└────────────────────┬────────────────────────────────────┘
                     │
                     ▼
┌─────────────────────────────────────────────────────────┐
│                    VIEWMODEL LAYER                      │
│  (BrowserViewModel, ProgressViewModel, MainViewModel)  │
└────────────────────┬────────────────────────────────────┘
                     │
                     ▼
┌─────────────────────────────────────────────────────────┐
│                  REPOSITORY LAYER                       │
│         (VideoRepository, ConfigRepository)             │
└──────┬─────────────────────────────────────┬────────────┘
       │                                     │
       ▼                                     ▼
┌──────────────┐                     ┌──────────────┐
│ LOCAL DATA  │                     │ REMOTE DATA  │
│   (Room)    │                     │   (Retrofit) │
└──────────────┘                     └──────────────┘
```

---

## 🔧 BƯỚC 1: TẠO PROJECT VÀ DEPENDENCIES

### 1.1. Tạo Android Project
- Mở Android Studio
- Tạo New Project với **Empty Activity**
- Chọn language: **Kotlin**
- Minimum SDK: **21 (Android 5.0)**

### 1.2. Cấu hình `build.gradle` (Project level)

```gradle
buildscript {
    ext.kotlin_version = "1.3.11"
    repositories {
        google()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
    }
}
```

### 1.3. Cấu hình `build.gradle` (Module: app)

```gradle
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-allopen'

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "com.yourname.videodownloader"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }
}

dependencies {
    // Android Support
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // ViewModel & LiveData
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    kapt 'android.arch.lifecycle:compiler:1.1.1'

    // Room
    implementation 'android.arch.persistence.room:runtime:1.1.1'
    implementation 'android.arch.persistence.room:rxjava2:1.1.1'
    kapt 'android.arch.persistence.room:compiler:1.1.1'

    // Dagger 2 (Dependency Injection)
    implementation 'com.google.dagger:dagger:2.19'
    implementation 'com.google.dagger:dagger-android:2.19'
    implementation 'com.google.dagger:dagger-android-support:2.19'
    kapt 'com.google.dagger:dagger-compiler:2.19'
    kapt 'com.google.dagger:dagger-android-processor:2.19'

    // Network
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.11.0'

    // RxJava
    implementation 'io.reactivex.rxjava2:rxjava:2.2.2'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'

    // Glide (Load images)
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'

    // Testing
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

// For @OpenForTesting annotation
allOpen {
    annotation 'com.yourname.videodownloader.OpenForTesting'
}
```

### 1.4. Thêm permissions vào `AndroidManifest.xml`

```xml
<manifest xmlns:android="http://schemas.android.com/apk/res/android">

    <!-- Required for download -->
    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />

    <application
        android:name=".DLApplication"
        ...>
    </application>
</manifest>
```

---

## 🏗️ BƯỚC 2: TẠO CẤU TRÚC THƯ MỤC

```
app/src/main/java/com/yourname/videodownloader/
├── data/
│   ├── local/
│   │   ├── model/
│   │   │   ├── VideoInfo.kt
│   │   │   ├── ProgressInfo.kt
│   │   │   └── SupportedPage.kt
│   │   └── VideoLocalDataSource.kt
│   ├── remote/
│   │   ├── service/
│   │   │   └── VideoService.kt
│   │   └── VideoRemoteDataSource.kt
│   └── repository/
│       └── VideoRepository.kt
├── di/
│   ├── component/
│   │   └── AppComponent.kt
│   └── module/
│       ├── AppModule.kt
│       ├── NetworkModule.kt
│       ├── RepositoryModule.kt
│       └── ViewModelModule.kt
├── util/
│   ├── SingleLiveEvent.kt
│   ├── scheduler/
│   │   └── BaseSchedulers.kt
│   └── ViewModelFactory.kt
└── ui/
    ├── main/
    │   ├── base/
    │   │   ├── BaseActivity.kt
    │   │   ├── BaseFragment.kt
    │   │   └── BaseViewModel.kt
    │   ├── home/
    │   │   ├── MainActivity.kt
    │   │   ├── MainViewModel.kt
    │   │   ├── BrowserFragment.kt
    │   │   └── BrowserViewModel.kt
    │   └── progress/
    │       ├── ProgressFragment.kt
    │       └── ProgressViewModel.kt
    └── component/
        ├── adapter/
        └── dialog/
```

---

## 📁 BƯỚC 3: TẠO CÁC FILE CHÍNH

### 3.1. Application Class

**File: `DLApplication.kt`**
```kotlin
package com.yourname.videodownloader

import android.app.Application

class DLApplication : Application() {
    override fun onCreate() {
        super.onCreate()
    }
}
```

### 3.2. Data Model - VideoInfo

**File: `data/local/model/VideoInfo.kt`**
```kotlin
package com.yourname.videodownloader.data.local.model

import android.arch.persistence.room.ColumnInfo
import android.arch.persistence.room.Entity
import android.arch.persistence.room.PrimaryKey
import com.google.gson.annotations.Expose
import com.google.gson.annotations.SerializedName
import java.util.*

@Entity(tableName = "VideoInfo")
data class VideoInfo(
    @PrimaryKey
    @ColumnInfo(name = "id")
    var id: String = UUID.randomUUID().toString(),

    @ColumnInfo(name = "downloadUrl")
    @SerializedName("url")
    @Expose
    var downloadUrl: String = "",

    @ColumnInfo(name = "title")
    @SerializedName("title")
    @Expose
    var title: String = "",

    @ColumnInfo(name = "ext")
    @SerializedName("ext")
    @Expose
    var ext: String = "",

    @ColumnInfo(name = "thumbnail")
    @SerializedName("thumbnail")
    @Expose
    var thumbnail: String = "",

    @ColumnInfo(name = "duration")
    @SerializedName("duration")
    @Expose
    var duration: Int = 0,

    @ColumnInfo(name = "originalUrl")
    var originalUrl: String = ""
) {
    val name
        get() = "$title.$ext"
}
```

### 3.3. Repository Pattern

**File: `data/repository/VideoRepository.kt`**
```kotlin
package com.yourname.videodownloader.data.repository

import com.yourname.videodownloader.data.local.model.VideoInfo
import io.reactivex.Flowable

interface VideoRepository {
    fun getVideoInfo(url: String): Flowable<VideoInfo>
    fun saveVideoInfo(videoInfo: VideoInfo)
}

class VideoRepositoryImpl(
    private val remoteDataSource: VideoRepository
) : VideoRepository {

    override fun getVideoInfo(url: String): Flowable<VideoInfo> {
        return remoteDataSource.getVideoInfo(url)
    }

    override fun saveVideoInfo(videoInfo: VideoInfo) {
        remoteDataSource.saveVideoInfo(videoInfo)
    }
}
```

### 3.4. Network Service

**File: `data/remote/service/VideoService.kt`**
```kotlin
package com.yourname.videodownloader.data.remote.service

import com.yourname.videodownloader.data.local.model.VideoInfo
import io.reactivex.Flowable
import retrofit2.http.GET
import retrofit2.http.Query

interface VideoService {
    @GET("info")
    fun getVideoInfo(@Query("url") url: String): Flowable<VideoInfo>
}
```

### 3.5. Remote Data Source

**File: `data/remote/VideoRemoteDataSource.kt`**
```kotlin
package com.yourname.videodownloader.data.remote

import com.yourname.videodownloader.data.local.model.VideoInfo
import com.yourname.videodownloader.data.remote.service.VideoService
import io.reactivex.Flowable

class VideoRemoteDataSource(
    private val videoService: VideoService
) {

    fun getVideoInfo(url: String): Flowable<VideoInfo> {
        return videoService.getVideoInfo(url)
    }
}
```

---

## 🎨 BƯỚC 4: TẠO UI - BROWSER

### 4.1. Layout `fragment_browser.xml`

```xml
<?xml version="1.0" encoding="utf-8"?>
<layout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto">

    <data>
        <variable name="viewModel" type="com.yourname.videodownloader.ui.main.home.BrowserViewModel"/>
    </data>

    <android.support.design.widget.CoordinatorLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <WebView
            android:id="@+id/webview"
            android:layout_width="match_parent"
            android:layout_height="match_parent" />

        <android.support.design.widget.FloatingActionButton
            android:id="@+id/fab_download"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_gravity="bottom|end"
            android:layout_margin="16dp"
            android:src="@android:drawable/ic_menu_upload"
            android:onClick="@{() -> viewModel.getVideoInfo()}"
            android:visibility="@{viewModel.isShowFabBtn ? View.VISIBLE : View.GONE}"/>
    </android.support.design.widget.CoordinatorLayout>
</layout>
```

### 4.2. BrowserViewModel

**File: `ui/main/home/BrowserViewModel.kt`**
```kotlin
package com.yourname.videodownloader.ui.main.home

import android.databinding.ObservableBoolean
import android.databinding.ObservableField
import com.yourname.videodownloader.data.local.model.VideoInfo
import com.yourname.videodownloader.data.repository.VideoRepository
import com.yourname.videodownloader.ui.main.base.BaseViewModel
import com.yourname.videodownloader.util.SingleLiveEvent
import io.reactivex.disposables.CompositeDisposable

class BrowserViewModel(
    private val videoRepository: VideoRepository
) : BaseViewModel() {

    val textInput = ObservableField<String>("")
    val pageUrl = ObservableField<String>("")
    val isShowFabBtn = ObservableBoolean(false)
    val isLoadingVideoInfo = ObservableBoolean(false)

    val showDownloadDialogEvent = SingleLiveEvent<VideoInfo>()

    private lateinit var compositeDisposable: CompositeDisposable

    override fun start() {
        compositeDisposable = CompositeDisposable()
    }

    override fun stop() {
        compositeDisposable.clear()
    }

    fun getVideoInfo() {
        textInput.get()?.let { url ->
            videoRepository.getVideoInfo(url)
                .doOnSubscribe { isLoadingVideoInfo.set(true) }
                .doAfterTerminate { isLoadingVideoInfo.set(false) }
                .subscribeOn(io())
                .observeOn(mainThread())
                .subscribe({ videoInfo ->
                    showDownloadDialogEvent.value = videoInfo
                }, { error ->
                    error.printStackTrace()
                })
                .let { compositeDisposable.add(it) }
        }
    }
}
```

---

## 📥 BƯỚC 5: TẠO UI - PROGRESS & DOWNLOAD

### 5.1. ProgressViewModel

**File: `ui/main/progress/ProgressViewModel.kt`**
```kotlin
package com.yourname.videodownloader.ui.main.progress

import android.app.DownloadManager
import android.app.DownloadManager.Request
import android.databinding.ObservableArrayList
import android.databinding.ObservableList
import android.net.Uri
import com.yourname.videodownloader.data.local.model.VideoInfo
import com.yourname.videodownloader.ui.main.base.BaseViewModel
import io.reactivex.Completable
import io.reactivex.disposables.CompositeDisposable
import java.io.File

class ProgressViewModel(
    private val downloadManager: DownloadManager,
    private val folderDir: File
) : BaseViewModel() {

    val progressInfos: ObservableList<ProgressInfo> = ObservableArrayList()

    private lateinit var compositeDisposable: CompositeDisposable

    override fun start() {
        compositeDisposable = CompositeDisposable()
    }

    override fun stop() {
        compositeDisposable.clear()
    }

    fun downloadVideo(videoInfo: VideoInfo?) {
        videoInfo?.let {
            if (!folderDir.exists() && !folderDir.mkdirs()) return

            val request = Request(Uri.parse(it.downloadUrl)).apply {
                setDestinationInExternalPublicDir("VideoDownloader", it.name)
                setNotificationVisibility(Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED)
                allowScanningByMediaScanner()
            }

            val downloadId = downloadManager.enqueue(request)
            // Save to local database...
        }
    }
}
```

---

## 🔌 BƯỚC 6: SETUP BACKEND API

### Bạn có 2 lựa chọn:

#### Cách 1: Sử dụng backend có sẵn
```
API: http://youtube-dl-android.herokuapp.com/api/info
Query: ?url=VIDEO_URL
```

#### Cách 2: Tạo backend riêng với Node.js + youtube-dl

**File: `server.js`**
```javascript
const express = require('express');
const youtubeDl = require('youtube-dl');
const app = express();

app.get('/api/info', (req, res) => {
    const url = req.query.url;

    youtubeDl.getInfo(url, ['--format=best'], (err, info) => {
        if (err) {
            return res.status(400).json({ error: err.message });
        }

        res.json({
            downloadUrl: info.url,
            title: info.title,
            ext: info.ext,
            thumbnail: info.thumbnail,
            duration: info.duration
        });
    });
});

app.listen(3000, () => {
    console.log('Server running on port 3000');
});
```

**Deploy lên Heroku:**
```bash
# Tạo file package.json
npm init -y
npm install express youtube-dl
npm install -g heroku

# Deploy
git init
git add .
git commit -m "Initial commit"
heroku create
git push heroku master
```

---

## 🚀 BƯỚC 7: TRIỂN KHAI DOWNLOAD

### 7.1. MainActivity

**File: `ui/main/home/MainActivity.kt`**
```kotlin
package com.yourname.videodownloader.ui.main.home

import android.Manifest
import android.content.pm.PackageManager
import android.support.v4.app.ActivityCompat
import android.support.v4.content.ContextCompat
import android.support.v4.view.ViewPager
import android.support.v7.app.AppCompatActivity
import android.os.Bundle
import kotlinx.android.synthetic.main.activity_main.*

class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        grantPermissions()

        val adapter = PagerAdapter(supportFragmentManager)
        viewPager.adapter = adapter
    }

    private fun grantPermissions() {
        if (ContextCompat.checkSelfPermission(
                this, Manifest.permission.WRITE_EXTERNAL_STORAGE
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            ActivityCompat.requestPermissions(
                this,
                arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE),
                0
            )
        }
    }
}
```

---

## 📝 TÓM TẮT CHECKLIST

- [ ] Setup project Android với Kotlin
- [ ] Thêm dependencies vào build.gradle
- [ ] Tạo cấu trúc thư mục theo Architecture Component
- [ ] Implement Data layer (VideoInfo, Repository)
- [ ] Implement Remote layer (Retrofit + VideoService)
- [ ] Setup Backend API (youtube-dl server)
- [ ] Implement UI layer (BrowserFragment + ProgressFragment)
- [ ] Implement ViewModel layer
- [ ] Implement DownloadManager
- [ ] Test app với các trang web khác nhau

---

## 🎓 NEXT STEPS

1. **Test với nhiều nguồn video**: YouTube, Facebook, TikTok, etc.
2. **Tối ưu UI/UX**: Progress bar, notification
3. **Thêm features**: Playlist download, chất lượng video
4. **Error handling**: Xử lý lỗi mạng, file corruption
5. **Performance**: Caching, background download

---

## 📞 SUPPORT

Nếu có vấn đề, hãy check:
- Logcat để debug
- Network traffic với Stetho
- Database với Room Inspector
- API response với Postman

Good luck! 🚀

